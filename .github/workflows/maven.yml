name: Java CI with Maven, Docker Build and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DOCKER_IMAGE: "regent_server"
  DEPLOY_DIR: "/root/deploy_regent_server/"
  CONTAINER_NAME: "regent_server"
  HOST_PORT: "8080"
  CONTAINER_PORT: "8080"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: List files in the working directory
        run: ls -la

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE .
          docker images

      - name: Save Docker image
        run: |
          docker save $DOCKER_IMAGE -o $DOCKER_IMAGE.tar
          ls -lh

      - name: Install sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Copy files to remote server
        run: |
          sshpass -p "${{ secrets.SUDO_PASSWORD }}" scp -o StrictHostKeyChecking=no \
            $DOCKER_IMAGE.tar docker-compose.yml .env \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:$DEPLOY_DIR

  deploy-to-server:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Install sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Create deploy directory on remote server
        run: |
          sshpass -p "${{ secrets.SUDO_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            mkdir -p $DEPLOY_DIR
            chmod 777 $DEPLOY_DIR
          EOF

      - name: Check for required files
        run: |
          sshpass -p "${{ secrets.SUDO_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            if [ ! -f '$DEPLOY_DIR/$DOCKER_IMAGE.tar' ]; then
              echo 'Error: Docker image not found on server!'
              exit 1
            fi
            if [ ! -f '$DEPLOY_DIR/docker-compose.yml' ]; then
              echo 'Error: docker-compose.yml not found on server!'
              exit 1
            fi
            if [ ! -f '$DEPLOY_DIR/.env' ]; then
              echo 'Error: .env file not found on server!'
              exit 1
            fi
          EOF

      - name: Deploy Docker image on remote server
        run: |
          sshpass -p "${{ secrets.SUDO_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd $DEPLOY_DIR
          
            # Остановка и удаление старого контейнера
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            # Удаление старого образа
            docker rmi $DOCKER_IMAGE || true

            # Развёртывание нового контейнера
            docker load -i $DOCKER_IMAGE.tar
            docker-compose up -d --force-recreate
          EOF
