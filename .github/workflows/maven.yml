name: Java CI with Maven, Docker Build and Deploy

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

env:
  DOCKER_IMAGE: "regent_server"
  DEPLOY_DIR: "/root/deploy_regent_server/"
  CONTAINER_NAME: "regent_server"
  HOST_PORT: "8080"
  CONTAINER_PORT: "8080"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Проверка исходного кода
      - name: Checkout code
        uses: actions/checkout@v4

      # Шаг 2: Список файлов в рабочей директории (для диагностики)
      - name: List files in the working directory
        run: ls -la

      # Шаг 3: Настройка JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # Шаг 4: Сборка с Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Шаг 5: Установка sshpass
      - name: Install sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      # Шаг 6: Копирование исходных файлов на удалённый сервер
      - name: Copy source code and docker-compose.yml to remote server
        run: |
          # Копирование собранного артефакта и docker-compose.yml на сервер
          sshpass -p "${{ secrets.SUDO_PASSWORD }}" scp -o StrictHostKeyChecking=no \
            -r ./target ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:$DEPLOY_DIR
          
          # Копирование docker-compose.yml на сервер
          sshpass -p "${{ secrets.SUDO_PASSWORD }}" scp -o StrictHostKeyChecking=no \
            docker-compose.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:$DEPLOY_DIR

      # Шаг 7: Сборка Docker-образа на удалённом сервере
      - name: Build Docker image on remote server
        run: |
          sshpass -p "${{ secrets.SUDO_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << EOF
            cd $DEPLOY_DIR

            # Сборка Docker-образа на удалённом сервере
            docker build -t $DOCKER_IMAGE .
            docker images
          EOF

  deploy-to-server:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Шаг 1: Установка sshpass на сервере
      - name: Install sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      # Шаг 2: Создание директории для деплоя на сервере (если её нет)
      - name: Create deploy directory on remote server
        run: |
          sshpass -p "${{ secrets.SUDO_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << EOF
            # Создание директории, если она не существует
            mkdir -p /root/deploy_regent_server/

            # Установка прав доступа для директории
            chmod -R 777 /root/deploy_regent_server/
          EOF

      # Шаг 3: Проверка существования всех нужных файлов на сервере
      - name: Check for required files
        run: |
          sshpass -p "${{ secrets.SUDO_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << EOF
            if [ ! -f "/root/deploy_regent_server/$DOCKER_IMAGE.tar" ]; then
              echo "Error: Docker image not found on server!"
              exit 1
            fi
            if [ ! -f "/root/deploy_regent_server/docker-compose.yml" ]; then
              echo "Error: docker-compose.yml not found on server!"
              exit 1
            fi
            if [ ! -f "/root/deploy_regent_server/.env" ]; then
              echo "Error: .env file not found on server!"
              exit 1
            fi
          EOF

      # Шаг 4: Развёртывание Docker-образа на сервере
      - name: Deploy Docker image on remote server
        run: |
          sshpass -p "${{ secrets.SUDO_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << EOF
            cd /root/deploy_regent_server/
          
            # Остановка и удаление старого контейнера
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            # Удаление старого образа
            docker rmi $DOCKER_IMAGE || true

            # Развёртывание нового контейнера
            docker-compose up -d --force-recreate
          EOF
